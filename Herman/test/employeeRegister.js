'use strict';
const User = require('../models/user');

// tests for employeeRegister
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('employeeRegister', '/handler.js', 'employeeRegister');

describe('employeeRegister', () => {
  before((done) => {
    done();
  });

  it('should response without an error', () => {
    return wrapped.run({ body: { fullname: 'Foo Bar', title: 'Fullstack', jobDesc: 'Monitor and helping back-end front-end developers', email: 'foo@bar.com', password: 'foobarpassword', birthday: new Date(), phone: '085201010101', photos: { Bucket: 'fooBucket', Name: 'barName' } } }).then((response) => {
      expect(response).to.haveOwnProperty('statusCode');
      expect(response.statusCode).to.equal(201);
      expect(response).to.haveOwnProperty('body');
      after( async function(){
        await User.findOneAndDelete({email: 'foo@bar.com'});
      });
    });
  });

  it('should response with an error', () => {
    return wrapped.run({ body: { title: 'Fullstack', jobDesc: 'Monitor and helping back-end front-end developers', email: 'foo@bar.com', password: 'foobarpassword', birthday: new Date(), phone: '085201010101', photos: { Bucket: 'fooBucket', Name: 'barName' } } }).then((response) => {
      expect(response).to.haveOwnProperty('statusCode');
      expect(response.statusCode).to.equal(500);
      expect(response).to.haveOwnProperty('body');
    });
  });
});
